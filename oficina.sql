-- Trabalho de Banco de Dados - Oficina Automotiva


-- Criação da tabela CLIENTE
CREATE TABLE CLIENTE
(
	COD_CLIENTE INTEGER PRIMARY KEY NOT NULL,
	CPF VARCHAR(15) NOT NULL,
	NOME VARCHAR(80) NOT NULL,
	DT_NASC DATE NOT NULL,
	TELEFONE VARCHAR(15) NOT NULL,
	EMAIL VARCHAR(40)
);


-- Criação da tabela ORDEM_SERVICO
CREATE TABLE ORDEM_SERVICO
(
	COD_ORDEM_SERVICO INTEGER PRIMARY KEY NOT NULL,
	COD_CLIENTE INTEGER NOT NULL,
	COD_FUNCIONARIO INTEGER NOT NULL,
	COD_VEICULO INTEGER NOT NULL,
	DATA_EMISSAO DATE NOT NULL,
	VALOR FLOAT NOT NULL,
	DESCONTO FLOAT NOT NULL,
	FOREIGN KEY (COD_CLIENTE) REFERENCES CLIENTE(COD_CLIENTE),
	FOREIGN KEY (COD_FUNCIONARIO) REFERENCES FUNCIONARIO(COD_FUNCIONARIO),
	FOREIGN KEY (COD_VEICULO) REFERENCES VEICULO(COD_VEICULO)
);


-- Criação da tabela FUNCIONARIO
CREATE TABLE FUNCIONARIO
(
	COD_FUNCIONARIO INTEGER PRIMARY KEY NOT NULL,
	CPF VARCHAR(15) NOT NULL,
	NOME VARCHAR(80) NOT NULL,
	DT_NASC DATE NOT NULL,
	TELEFONE VARCHAR(15) NOT NULL,
	EMAIL VARCHAR(40)
);


-- Criação da tabela VEICULO
CREATE TABLE VEICULO
(
	COD_VEICULO INTEGER PRIMARY KEY NOT NULL,
	COD_MODELO INTEGER NOT NULL,
	PLACA VARCHAR(7) NOT NULL,
	COR VARCHAR(15),
	FOREIGN KEY (COD_MODELO) REFERENCES MODELO(COD_MODELO)
);


-- Criação da tabela MODELO
CREATE TABLE MODELO
(
	COD_MODELO INTEGER PRIMARY KEY NOT NULL,
	COD_MONTADORA INTEGER NOT NULL,
	NOME VARCHAR(25) NOT NULL,
	ANO INTEGER NOT NULL,
	FOREIGN KEY (COD_MONTADORA) REFERENCES MONTADORA(COD_MONTADORA)
);


-- Criação da tabela MONTADORA
CREATE TABLE MONTADORA
(
	COD_MONTADORA INTEGER PRIMARY KEY NOT NULL,
	NOME VARCHAR(15) NOT NULL
);


-- Criação da tabela ITEM
CREATE TABLE ITEM
(
	COD_ITEM INTEGER PRIMARY KEY NOT NULL,
	COD_TIPO_ITEM INTEGER NOT NULL,
	NOME VARCHAR(30) NOT NULL,
	PRECO FLOAT NOT NULL,
	DESCRICAO TEXT NOT NULL,
	QUANTIDADE INTEGER,
	FOREIGN KEY (COD_TIPO_ITEM) REFERENCES TIPO_ITEM(COD_TIPO_ITEM)
);


-- Criação da tabela TIPO_ITEM
CREATE TABLE TIPO_ITEM
(
	COD_TIPO_ITEM INTEGER PRIMARY KEY NOT NULL,
	NOME VARCHAR NOT NULL
);


-- Criação da tabela ITEM_ORDEM
CREATE TABLE ITEM_ORDEM
(
	COD_ITEM_ORDEM INTEGER PRIMARY KEY NOT NULL,
	COD_ORDEM_SERVICO INTEGER NOT NULL,
	COD_ITEM INTEGER NOT NULL,
	QUANTIDADE INTEGER NOT NULL,
	FOREIGN KEY (COD_ORDEM_SERVICO) REFERENCES ORDEM_SERVICO(COD_ORDEM_SERVICO),
	FOREIGN KEY (COD_ITEM) REFERENCES ITEM(COD_ITEM)
);


/*
Normaliza o nome de uma tabela, fazendo com que a primeira letra de cada palavra
seja maiúscula
*/
CREATE OR REPLACE FUNCTION NORMALIZAR_NOME()
RETURNS TRIGGER AS
$$
BEGIN
    NEW.NOME = INITCAP(NEW.NOME);
    RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;



-- Normaliza o e-mail de uma tabela fazendo com que todas as letras sejam minúsculas
CREATE OR REPLACE FUNCTION NORMALIZAR_EMAIL()
RETURNS TRIGGER AS
$$
BEGIN
    NEW.EMAIL = LOWER(NEW.EMAIL);
    RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;


-- Trigger que executa a função NORMALIZAR_EMAIL() na tabela CLIENTE
CREATE OR REPLACE TRIGGER TRG_NORMALIZAR_EMAIL_CLIENTE
BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_EMAIL();


-- Trigger que executa a função NORMALIZAR_EMAIL() na tabela FUNCIONARIO
CREATE OR REPLACE TRIGGER TRG_NORMALIZAR_EMAIL_FUNCIONARIO
BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_EMAIL();


-- Trigger que executa a função NORMALIZAR_NOME() na tabela CLIENTE
CREATE TRIGGER TRG_NORMALIZAR_NOME_CLIENTE
BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_NOME();


-- Trigger que executa a função NORMALIZAR_NOME() na tabela FUNCIONARIO
CREATE TRIGGER TRG_NORMALIZAR_NOME_FUNCIONARIO
BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_NOME();


-- Trigger que executa a função NORMALIZAR_NOME() na tabela NOME_ITEM
CREATE TRIGGER TRG_NORMALIZAR_NOME_ITEM
BEFORE INSERT OR UPDATE ON ITEM
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_NOME();


-- Trigger que executa a função NORMALIZAR_NOME() na tabela NOME_MODELO
CREATE TRIGGER TRG_NORMALIZAR_NOME_MODELO
BEFORE INSERT OR UPDATE ON MODELO
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_NOME();


-- Trigger que executa a função NORMALIZAR_NOME() na tabela NOME_MONTADORA
CREATE TRIGGER TRG_NORMALIZAR_NOME_MONTADORA
BEFORE INSERT OR UPDATE ON MONTADORA
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_NOME();


-- Trigger que executa a função NORMALIZAR_NOME() na tabela TIPO_ITEM
CREATE TRIGGER TRG_NORMALIZAR_NOME_TIPO_ITEM
BEFORE INSERT OR UPDATE ON TIPO_ITEM
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_NOME();


/*
Normaliza a placa de um carro para que ela esteja de acordo com as regras
de emplacamento do Brasil (abrange tanto o modelo antigo de placas quanto o novo)
*/
CREATE OR REPLACE FUNCTION NORMALIZAR_PLACA()
RETURNS TRIGGER AS
$$
DECLARE
	PLACA_FORMATADA TEXT;
BEGIN
	-- Elimina espaços e hífens na placa
	PLACA_FORMATADA = UPPER(REPLACE(NEW.PLACA, ' ', ''));
	PLACA_FORMATADA = REPLACE(PLACA_FORMATADA, '-', '');

	IF PLACA_FORMATADA ~ '^[A-Z]{3}[0-9]{4}$'
	OR PLACA_FORMATADA ~ '^[A-Z]{3}[0-9]{1}[A-Z]{1}[0-9]{2}$' THEN
		NEW.PLACA = PLACA_FORMATADA;
	ELSE
		RAISE EXCEPTION 'Placa inválida!';
	END IF;

	RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;


-- Trigger que executa a função NORMALIZAR_PLACA na tabela VEICULO
CREATE OR REPLACE TRIGGER TRG_NORMALIZAR_PLACA
BEFORE INSERT OR UPDATE ON VEICULO
FOR EACH ROW
EXECUTE FUNCTION NORMALIZAR_PLACA();


INSERT INTO cliente VALUES
(
	1,
	'080.083.623-59',
	'henrIQUe paIvA',
	'09-12-2004',
	'86995631565',
	'hrPAIva3@gaYmail.com'
);


INSERT INTO FUNCIONARIO VALUES 
(
    1,
    '321.654.987-00',
    'ana cArOLina DOs sANtos',
    '1995-08-12',
    '99988-7766',
    'ANA.CAROLINA@EMAIL.COM'
);

DELETE FROM FUNCIONARIO;


INSERT INTO montadora (cod_montadora, nome)
VALUES (1, 'chEVRolEt');


INSERT INTO modelo (cod_modelo, cod_montadora, nome, ano)
VALUES (1, 1, 'onIx', 2022);


INSERT INTO tipo_item (cod_tipo_item, nome)
VALUES (1, 'pEÇa');


INSERT INTO item (cod_item, cod_tipo_item, nome, preco, descricao, quantidade)
VALUES (
    1,
    1,
    'fiLTrO dE ólEo',
    45.90,
    'Filtro de óleo original para motores GM 1.0/1.4',
    20
);


INSERT INTO veiculo (cod_veiculo, cod_modelo, placa, cor)
VALUES (
	1,
	1,
	'ael1234',
	'vErmelho'
);


SELECT * FROM CLIENTE
SELECT * FROM FUNCIONARIO
SELECT * FROM MODELO
SELECT * FROM MONTADORA
SELECT * FROM ITEM
SELECT * FROM TIPO_ITEM
SELECT * FROM VEICULO





